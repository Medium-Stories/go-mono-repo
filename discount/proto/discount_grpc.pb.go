// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: discount/proto/discount.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscountProviderClient is the client API for DiscountProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountProviderClient interface {
	ApplyDiscount(ctx context.Context, in *DiscountsRequest, opts ...grpc.CallOption) (*DiscountsResponse, error)
}

type discountProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountProviderClient(cc grpc.ClientConnInterface) DiscountProviderClient {
	return &discountProviderClient{cc}
}

func (c *discountProviderClient) ApplyDiscount(ctx context.Context, in *DiscountsRequest, opts ...grpc.CallOption) (*DiscountsResponse, error) {
	out := new(DiscountsResponse)
	err := c.cc.Invoke(ctx, "/discount.DiscountProvider/ApplyDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountProviderServer is the server API for DiscountProvider service.
// All implementations must embed UnimplementedDiscountProviderServer
// for forward compatibility
type DiscountProviderServer interface {
	ApplyDiscount(context.Context, *DiscountsRequest) (*DiscountsResponse, error)
	mustEmbedUnimplementedDiscountProviderServer()
}

// UnimplementedDiscountProviderServer must be embedded to have forward compatible implementations.
type UnimplementedDiscountProviderServer struct {
}

func (UnimplementedDiscountProviderServer) ApplyDiscount(context.Context, *DiscountsRequest) (*DiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyDiscount not implemented")
}
func (UnimplementedDiscountProviderServer) mustEmbedUnimplementedDiscountProviderServer() {}

// UnsafeDiscountProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountProviderServer will
// result in compilation errors.
type UnsafeDiscountProviderServer interface {
	mustEmbedUnimplementedDiscountProviderServer()
}

func RegisterDiscountProviderServer(s grpc.ServiceRegistrar, srv DiscountProviderServer) {
	s.RegisterService(&DiscountProvider_ServiceDesc, srv)
}

func _DiscountProvider_ApplyDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountProviderServer).ApplyDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.DiscountProvider/ApplyDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountProviderServer).ApplyDiscount(ctx, req.(*DiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscountProvider_ServiceDesc is the grpc.ServiceDesc for DiscountProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscountProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discount.DiscountProvider",
	HandlerType: (*DiscountProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyDiscount",
			Handler:    _DiscountProvider_ApplyDiscount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discount/proto/discount.proto",
}
